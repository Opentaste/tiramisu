[{"ignore": false, "code": "tiramisu.modules.get.methods.dom = {\n\n    // Each module within Tiramisu can to need inherit other modules.\n    // The number of cups of coffee is identified for each module.\n    'ingredients': [1],\n    'cups_of_coffee': 3,\n\n    'before': function(html) {\n        insert_content(this, html, true, false)\n        return this;\n    },\n    'after': function(html) {\n        insert_content(this, html, false, false);\n        return this;\n    },\n    'append': function(html) {\n        insert_content(this, html, false, true);\n        return this;\n    },\n    'prepend': function(html) {\n        insert_content(this, html, true, true);\n        return this;\n    },\n    'empty': function() {\n        // Todo\n        // Remove events to avoid memory leaks;\n        for (var i = 0; i < tiramisu.get.results.length; i++) {\n            var child = tiramisu.get.results[i].childNodes[0];\n            while (child) {\n                var next = child.nextSibling;\n                tiramisu.get.results[i].removeChild(child);\n                child = next;\n            }\n        }\n    },\n    'destroy': function(el) {\n        if (tiramisu.get.results[0] === undefined) {\n            return '';\n        }\n\n        if (el !== undefined && typeof el === 'string') {\n            var res = t.get(tiramisu.get.selector + ' ' + el),\n                len = res.length;\n            for (var i = len; i--;) {\n                var parent = res[i].parentNode;\n                parent.removeChild(res[i]);\n            }\n        } else {\n            for (i = tiramisu.get.results.length; i--;) {\n                var parent = tiramisu.get.results[i].parentNode;\n                parent.removeChild(tiramisu.get.results[i]);\n            }\n        }\n        return this;\n    },\n};\n\n// DOM Node insertion generic utility\n\nfunction insert_content(self, html, before, append) {\n    // Aliasing results\n    var results = self,\n        len_result = results.length;\n\n    var i, j, parent, elements = [];\n\n    var div = t.d.createElement('div');\n    // \u201c...A better version will be to create a document fragment, update it \"offline\",\n    // and add it to the live DOM when it's ready. When you add a document fragment to\n    // the DOM tree, the content of the fragment gets added, not the fragment itself.\n    // And this is really convenient. So the document fragment is a good way to wrap\n    // a number of nodes even when you're not containing them in a suitable parent\n    // (for example, your paragraphs are not in a div element)\u201d\n    // \n    // From \u201cJavaScript Patterns\u201d, pages 184-185, chapter VIII\n    var frag = t.d.createDocumentFragment();\n\n    for (i = 0; i < len_result; i++) {\n\n        if (typeof html === 'string') {\n            div.innerHTML = html;\n            elements = div.children;\n\n        } else if (typeof html.css === 'function') {\n            elements.push(html[0]); // html is t.get(t.make('p'))\n        } else {\n            elements.push(html); // html is an element\n        }\n\n        parent = results[i].parentNode;\n\n        for (j = 0; j < elements.length; j++) {\n\n            if (before) {\n                frag.insertBefore(elements[j], frag.firstChild);\n            } else {\n                frag.appendChild(elements[j]);\n            }\n        }\n\n        if (before) {\n            (append) ? results[i].insertBefore(frag, results[i].firstChild) : parent.insertBefore(frag, results[i]);\n        } else {\n            (append) ? results[i].appendChild(frag) : parent.insertBefore(frag, results[i].nextSibling);\n        }\n    }\n}", "description": {"body": "<p>Several methods for DOM-related tasks:</p>\n\n<ul>\n<li><em>Insert/Append</em></li>\n<li><em>Insert Before/Prepend</em></li>\n<li><em>Empty/Destroy</em></li>\n</ul>\n\n<h2>Insert Before method</h2>\n\n<p>Insert text or html, before each element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).before(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector, <em>HTML</em> is the element to insert.</p>\n\n<p>Example #1 ()</p>\n\n<pre><code>&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n...\nt.get('.inner').before('&lt;p&gt;ciccio&lt;/p&gt;')\n\nproduce the following result:\n\n&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n</code></pre>\n\n<h2>Insert After method</h2>\n\n<p>Insert text or html, after each element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).after(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>HTML</em> is the element to insert.</p>\n\n<p>Example #1 (Inserting an element multiple times)</p>\n\n<pre><code>&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n...\nt.get('.inner').after('&lt;p&gt;ciccio&lt;/p&gt;')\n\nproduces the following result:\n\n&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n</code></pre>\n\n<h2>Append method</h2>\n\n<p>Appends a DOM element into a list of selector results.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).append(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>HTML</em> is a string containing some HTML<br />(such as &lt;p>hi&lt;/p>, &lt;h1>headline&lt;/h1> etc.)</p>\n\n<p>Example #1 (Append a single element)</p>\n\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n...\nt.get('ul').append('&lt;li&gt;Three&lt;/li&gt;');\n\nproduces the following:\n\n&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n  &lt;li&gt;Three&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Example #2 (Append multiple elements)</p>\n\n<pre><code> &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;One&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n ...\n t.get('ul li').append('&lt;p&gt;append&lt;/p&gt;');\n\n produces the following:\n\n &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;One&lt;/p&gt;\n     &lt;p&gt;append&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n     &lt;p&gt;append&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n\n<h2>Prepend method</h2>\n\n<p>Prepends a DOM element into a list of selector results.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).prepend(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>HTML</em> is a string containing some HTML<br />(such as &lt;p>hi&lt;/p>, &lt;h1>headline&lt;/h1> etc.)</p>\n\n<p>Example #1 (Prepend a single element)</p>\n\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n...\nt.get('ul').prepend('&lt;li&gt;Three&lt;/li&gt;');\n\nproduces the following:\n\n&lt;ul&gt;\n  &lt;li&gt;Zero&lt;/li&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Example #2 (Prepend multiple elements)</p>\n\n<pre><code> &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;One&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n ...\n t.get('ul li').prepend('&lt;p&gt;prepend&lt;/p&gt;');\n\n produces the following:\n\n &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;prepend&lt;/p&gt;\n     &lt;p&gt;One&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;prepend&lt;/p&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n\n<h2>Empty extension method</h2>\n\n<p>Removes all the child elements of a specific node from the DOM.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).empty()\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector (containing <em>one</em> or <em>more</em> elements).</p>\n\n<p>Example #1 (Remove all element of a list)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate&lt;/span&gt; chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('#myList').empty()</em> will give the following results:</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;&lt;/ol&gt;\n</code></pre>\n\n<p>Example #2 (Remove a specific element)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate chips!&lt;/span&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('.tasty').empty()</em> will give the following results:</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;&lt;/span&gt; chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<h2>Destroy extension method</h2>\n\n<p>Removes element</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).destroy(*ELEMENT*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>ELEMENT</em> is the DOM element</p>\n\n<p>Example #1 (Remove all element child)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate&lt;/span&gt; chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('#myList').destroy('.tasty')</em> will give the following results:</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n    &lt;li&gt;This is my &lt;/li&gt;\n    &lt;li&gt;I love  chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>Example #2 (Remove element and child)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate chips!&lt;/span&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('#myList').destroy()</em> will give the following results:</p>\n\n<pre><code>&lt;div id=\"myDestroyList\"&gt;\n\n&lt;/div&gt;\n</code></pre>", "full": "<h1>DOM Selector methods</h1>\n\n<p>Several methods for DOM-related tasks:</p>\n\n<ul>\n<li><em>Insert/Append</em></li>\n<li><em>Insert Before/Prepend</em></li>\n<li><em>Empty/Destroy</em></li>\n</ul>\n\n<h2>Insert Before method</h2>\n\n<p>Insert text or html, before each element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).before(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector, <em>HTML</em> is the element to insert.</p>\n\n<p>Example #1 ()</p>\n\n<pre><code>&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n...\nt.get('.inner').before('&lt;p&gt;ciccio&lt;/p&gt;')\n\nproduce the following result:\n\n&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n</code></pre>\n\n<h2>Insert After method</h2>\n\n<p>Insert text or html, after each element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).after(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>HTML</em> is the element to insert.</p>\n\n<p>Example #1 (Inserting an element multiple times)</p>\n\n<pre><code>&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n...\nt.get('.inner').after('&lt;p&gt;ciccio&lt;/p&gt;')\n\nproduces the following result:\n\n&lt;h1&gt;Hello Tiramisu&lt;/h1&gt;\n&lt;div class=\"inner\"&gt;ciao&lt;/div&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n&lt;div class=\"inner\"&gt;mondo&lt;/div&gt;\n&lt;p&gt;ciccio&lt;/p&gt;\n</code></pre>\n\n<h2>Append method</h2>\n\n<p>Appends a DOM element into a list of selector results.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).append(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>HTML</em> is a string containing some HTML<br />(such as &lt;p>hi&lt;/p>, &lt;h1>headline&lt;/h1> etc.)</p>\n\n<p>Example #1 (Append a single element)</p>\n\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n...\nt.get('ul').append('&lt;li&gt;Three&lt;/li&gt;');\n\nproduces the following:\n\n&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n  &lt;li&gt;Three&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Example #2 (Append multiple elements)</p>\n\n<pre><code> &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;One&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n ...\n t.get('ul li').append('&lt;p&gt;append&lt;/p&gt;');\n\n produces the following:\n\n &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;One&lt;/p&gt;\n     &lt;p&gt;append&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n     &lt;p&gt;append&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n\n<h2>Prepend method</h2>\n\n<p>Prepends a DOM element into a list of selector results.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).prepend(*HTML*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>HTML</em> is a string containing some HTML<br />(such as &lt;p>hi&lt;/p>, &lt;h1>headline&lt;/h1> etc.)</p>\n\n<p>Example #1 (Prepend a single element)</p>\n\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n...\nt.get('ul').prepend('&lt;li&gt;Three&lt;/li&gt;');\n\nproduces the following:\n\n&lt;ul&gt;\n  &lt;li&gt;Zero&lt;/li&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Example #2 (Prepend multiple elements)</p>\n\n<pre><code> &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;One&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n ...\n t.get('ul li').prepend('&lt;p&gt;prepend&lt;/p&gt;');\n\n produces the following:\n\n &lt;ul&gt;\n   &lt;li&gt;\n     &lt;p&gt;prepend&lt;/p&gt;\n     &lt;p&gt;One&lt;/p&gt;\n   &lt;/li&gt;\n   &lt;li&gt;\n     &lt;p&gt;prepend&lt;/p&gt;\n     &lt;p&gt;Two&lt;/p&gt;\n   &lt;/li&gt;\n &lt;/ul&gt;\n</code></pre>\n\n<h2>Empty extension method</h2>\n\n<p>Removes all the child elements of a specific node from the DOM.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).empty()\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector (containing <em>one</em> or <em>more</em> elements).</p>\n\n<p>Example #1 (Remove all element of a list)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate&lt;/span&gt; chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('#myList').empty()</em> will give the following results:</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;&lt;/ol&gt;\n</code></pre>\n\n<p>Example #2 (Remove a specific element)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate chips!&lt;/span&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('.tasty').empty()</em> will give the following results:</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;&lt;/span&gt; chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<h2>Destroy extension method</h2>\n\n<p>Removes element</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).destroy(*ELEMENT*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>ELEMENT</em> is the DOM element</p>\n\n<p>Example #1 (Remove all element child)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate&lt;/span&gt; chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('#myList').destroy('.tasty')</em> will give the following results:</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n    &lt;li&gt;This is my &lt;/li&gt;\n    &lt;li&gt;I love  chips!&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>Example #2 (Remove element and child)</p>\n\n<pre><code>&lt;ol id=\"myList\"&gt;\n   &lt;li&gt;This is my &lt;span class=\"tasty\"&gt;icecake&lt;/span&gt;&lt;/li&gt;\n   &lt;li&gt;I love &lt;span class=\"tasty\"&gt;chocolate chips!&lt;/span&gt;&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>calling <em>t.get('#myList').destroy()</em> will give the following results:</p>\n\n<pre><code>&lt;div id=\"myDestroyList\"&gt;\n\n&lt;/div&gt;\n</code></pre>", "summary": "<h1>DOM Selector methods</h1>"}, "tags": []}]