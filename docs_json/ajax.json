[{"isPrivate": false, "ignore": false, "code": "tiramisu.modules.xhr = function() {\n    try {\n        return new XMLHttpRequest\n    } catch (err) {\n        try {\n            return new ActiveXObject(\"Msxml2.XMLHTTP\")\n        } catch (err) {\n            try {\n                return new ActiveXObject(\"Microsoft.XMLHTTP\")\n            } catch (err) {\n                return null\n            }\n        }\n    }\n}\ntiramisu.modules.ajax = function(setting_input) {\n\n    // Each module within Tiramisu can to need inherit other modules.\n    // The number of cups of coffee is identified for each module.\n    var ingredients = [2, 7],\n        cups_of_coffee = 4;\n\n    var xhr = tiramisu.modules.xhr();\n\n    var setting_input = setting_input || {},\n        setting = {\n            abort: false,\n            async: true,\n            content_type: '',\n            connection: '',\n            data_format: '',\n            error: function(res) {\n                try {\n                    console.log(res)\n                } catch (e) {}\n            },\n            start_load: function() {},\n            end_load: function() {},\n            loader: null,\n            method: 'GET',\n            parameter: '',\n            success: function() {},\n            successHTML: '',\n            stop: '',\n            url: ''\n        },\n        parameter = '',\n        // Is very important that parameter dafualt value is ''\n        parameter_count = 0,\n        url_cache = '',\n        get_params = '',\n        state = 0,\n        response = '';\n\n    if (setting.abort) {\n        if (xhr && xhr.readyState != 0 && xhr.readyState != 4) {\n            xhr.abort()\n        }\n    }\n\n    // extend object\n    for (var prop in setting_input) {\n        setting[prop] = setting_input[prop];\n    }\n\n    // object \"setting.parameter\" I create a string with the parameters \n    // to be passed in request\n    if (setting.parameter != '') {\n        for (attrname in setting.parameter) {\n            parameter += attrname + '=' + setting.parameter[attrname] + '&';\n        }\n        parameter = parameter.substring(0, parameter.length - 1);\n        if (setting.method === 'POST') {\n            if (!setting.content_type) {\n                setting.content_type = 'application/x-www-form-urlencoded';\n            }\n        } else {\n            get_params = '?' + parameter;\n        }\n    } else {\n        parameter = null;\n    }\n\n    if (t.detect('isIE') && setting.method === 'POST') {\n        // Easy Solution for Internet Explorer\n        url_cache = '?' + (('' + Math.random()).replace(/\\D/g, ''));\n    }\n\n    xhr.onreadystatechange = function() {\n        state = xhr.readyState;\n\n        if (state == 4) {\n            // success!\n            if (xhr.responseText) {\n                // ~\n                if (setting.data_format == 'json') {\n                    response = t.json.decode(xhr.responseText);\n                } else {\n                    response = xhr.responseText;\n                }\n\n                // ~\n                if (setting.successHTML) {\n                    if (typeof(setting.successHTML) === 'string') {\n                        t.d.getElementById(setting.successHTML).innerHTML = response;\n                    } else if (typeof(setting.successHTML) === 'object') {\n                        if (typeof(setting.successHTML.html) === 'function') {\n                            setting.successHTML.html(response);\n                        } else {\n                            setting.successHTML.innerHTML = response;\n                        }\n                    }\n                }\n\n                setting.end_load();\n                setting.success(response);\n\n\n            } else if (state == 4 && xhr.status == 400) {\n                // 400 Bad Request\n                setting.end_load();\n                setting.error('400 Bad Request');\n\n            } else if (state == 4 && xhr.status != 200) {\n                // fetched the wrong page or network error...\n                setting.end_load();\n                setting.error('Fetched the wrong page or network error');\n            }\n\n        } else {\n            if (setting.successHTML && setting.loader) {\n                if (typeof(setting.successHTML) === 'string') {\n                    t.d.getElementById(setting.successHTML).innerHTML = setting.loader;\n                } else if (typeof(setting.successHTML) === 'object') {\n                    if (typeof(setting.successHTML.html) === 'function') {\n                        setting.successHTML.html(setting.loader);\n                    } else {\n                        setting.successHTML.innerHTML = setting.loader;\n                    }\n                }\n            }\n        }\n    };\n\n\n    xhr.open(setting.method, setting.url + get_params + url_cache, setting.async);\n\n\n    if (setting.content_type) {\n        // The mime type of the body of the request (used with POST and PUT requests)\n        // Content-Type: application/x-www-form-urlencoded\n        // http://en.wikipedia.org/wiki/Mime_type\n        if (setting.data_format == 'json') {\n            // JavaScript Object Notation JSON; Defined in RFC 4627\n            setting.content_type = 'application/json; charset=UTF-8';\n        }\n        xhr.setRequestHeader('Content-type', setting.content_type);\n    }\n    if (setting.connection) {\n        // What type of connection the user-agent would prefer\n        // Connection: close\n        xhr.setRequestHeader('Connection', setting.connection);\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Set a request\n    // Set start load\n    setting.start_load();\n\n    if (setting.stop) {\n        t.task(setting.stop, function() {\n            xhr.abort();\n        })\n    }\n\n    xhr.send(parameter);\n    return this;\n};", "description": {"body": "<p>This module is mainly used to perform Ajax requests.</p>\n\n<pre><code>tiramisu.ajax(SETTINGS);\n</code></pre>\n\n<p>where the <em>SETTINGS</em> object can contain the following:</p>\n\n<ul>\n<li><em>async</em> (default is \u201ctrue\u201d);</li>\n<li><em>content_type</em> (in POST requests default is \u201capplication/x-www-form-urlencoded\u201d);</li>\n<li><em>connection</em>;</li>\n<li><em>error</em> (a callback function);</li>\n<li><em>start_load</em> (a callback function);</li>\n<li><em>end_load</em> (a callback function);</li>\n<li><em>loader</em>  (a url loader image);</li>\n<li><em>method</em>  (default is \u201cGET\u201d)</li>\n<li><em>parameter</em>;</li>\n<li><em>success</em> (a callback function);</li>\n<li><em>successHTML</em> (a div id);</li>\n<li><em>url</em> (this is the only <strong>mandatory</strong> field);</li>\n</ul>\n\n<p>Example #1 (Ajax GET request)</p>\n\n<pre><code>tiramisu.ajax({\n    url : '<a href='http://www.example.com'>http://www.example.com</a>'\n});\n</code></pre>\n\n<p>Example #2 (Ajax GET request with a success callback)</p>\n\n<pre><code>tiramisu.ajax({\n    url : '<a href='http://www.example.com'>http://www.example.com</a>',\n    success : function(data) {\n        alert(data);\n    }\n});\n</code></pre>\n\n<p>Example #3 (Ajax GET request loaded into a div with an id)</p>\n\n<pre><code>tiramisu.ajax({\n    url : '<a href='http://www.example.com'>http://www.example.com</a>',\n    successHTML : 'responseWrapper'\n});\n</code></pre>\n\n<p>Example #4 (Ajax POST request displaying a loader html)</p>\n\n<pre><code>tiramisu.ajax({\n     url: 'www.example.com',\n     method : 'POST',\n     loader : '&lt;img src=\"<a href='http://www.mysite.com/url_image_loader.jpg'>http://www.mysite.com/url_image_loader.jpg</a>\" alt=\"\" /&gt;',\n     successHTML : 'responseWrapper'\n});\n</code></pre>\n\n<p>Example #5 (Ajax GET request with parameters)</p>\n\n<pre><code>tiramisu.ajax({\n    parameter: {\n        param_1 : 'variable 1',\n        param_2 : 'variable 2'\n    },\n    successHTML : 'responseWrapper'\n    url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #6 (Ajax POST request with parameters)</p>\n\n<pre><code>tiramisu.ajax({\n    method : 'POST',\n    parameter: {\n        param_1 : 'variable 1',\n        param_2 : 'variable 2'\n    },\n    successHTML : 'responseWrapper'\n    url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #7 (Ajax GET request with success and error callbacks)</p>\n\n<pre><code>tiramisu.ajax({\n    url: '<a href='http://www.example.com'>http://www.example.com</a>',\n    success: function() {\n        console.log('Ok');\n    },\n    error: function() {\n        console.log('Error');\n    }\n});\n</code></pre>\n\n<p>Example #8 (Ajax POST request with successHTML and success callbacks)</p>\n\n<pre><code>tiramisu.ajax({\n   method : 'POST',\n   parameter: {\n        param_1 : 'variable 1',\n        param_2 : 'variable 2'\n    },\n   success: function(){ ... },\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #9 (Ajax set data_format)</p>\n\n<pre><code>tiramisu.ajax({\n   data_format: 'json',\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #10 (Ajax with start_load and end_load)</p>\n\n<pre><code>tiramisu.ajax({\n   start_load: function() {\n\n   },\n   end_load: function() {\n\n   },\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #11 (Ajax with time stop)</p>\n\n<pre><code>tiramisu.ajax({\n   stop : 2000,\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n</code></pre>\n\n<p>});</p>\n\n<p>Example #12 (If there is new request then to abort the past requests.)</p>\n\n<pre><code>tiramisu.ajax({\n   abort : true,\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Error<br />- #1 : Object Ajax Error!;</p>\n\n<p>param {Object} settings An object containing the Ajax call parameters</p>", "full": "<h1>Framework Ajax Module</h1>\n\n<p>This module is mainly used to perform Ajax requests.</p>\n\n<pre><code>tiramisu.ajax(SETTINGS);\n</code></pre>\n\n<p>where the <em>SETTINGS</em> object can contain the following:</p>\n\n<ul>\n<li><em>async</em> (default is \u201ctrue\u201d);</li>\n<li><em>content_type</em> (in POST requests default is \u201capplication/x-www-form-urlencoded\u201d);</li>\n<li><em>connection</em>;</li>\n<li><em>error</em> (a callback function);</li>\n<li><em>start_load</em> (a callback function);</li>\n<li><em>end_load</em> (a callback function);</li>\n<li><em>loader</em>  (a url loader image);</li>\n<li><em>method</em>  (default is \u201cGET\u201d)</li>\n<li><em>parameter</em>;</li>\n<li><em>success</em> (a callback function);</li>\n<li><em>successHTML</em> (a div id);</li>\n<li><em>url</em> (this is the only <strong>mandatory</strong> field);</li>\n</ul>\n\n<p>Example #1 (Ajax GET request)</p>\n\n<pre><code>tiramisu.ajax({\n    url : '<a href='http://www.example.com'>http://www.example.com</a>'\n});\n</code></pre>\n\n<p>Example #2 (Ajax GET request with a success callback)</p>\n\n<pre><code>tiramisu.ajax({\n    url : '<a href='http://www.example.com'>http://www.example.com</a>',\n    success : function(data) {\n        alert(data);\n    }\n});\n</code></pre>\n\n<p>Example #3 (Ajax GET request loaded into a div with an id)</p>\n\n<pre><code>tiramisu.ajax({\n    url : '<a href='http://www.example.com'>http://www.example.com</a>',\n    successHTML : 'responseWrapper'\n});\n</code></pre>\n\n<p>Example #4 (Ajax POST request displaying a loader html)</p>\n\n<pre><code>tiramisu.ajax({\n     url: 'www.example.com',\n     method : 'POST',\n     loader : '&lt;img src=\"<a href='http://www.mysite.com/url_image_loader.jpg'>http://www.mysite.com/url_image_loader.jpg</a>\" alt=\"\" /&gt;',\n     successHTML : 'responseWrapper'\n});\n</code></pre>\n\n<p>Example #5 (Ajax GET request with parameters)</p>\n\n<pre><code>tiramisu.ajax({\n    parameter: {\n        param_1 : 'variable 1',\n        param_2 : 'variable 2'\n    },\n    successHTML : 'responseWrapper'\n    url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #6 (Ajax POST request with parameters)</p>\n\n<pre><code>tiramisu.ajax({\n    method : 'POST',\n    parameter: {\n        param_1 : 'variable 1',\n        param_2 : 'variable 2'\n    },\n    successHTML : 'responseWrapper'\n    url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #7 (Ajax GET request with success and error callbacks)</p>\n\n<pre><code>tiramisu.ajax({\n    url: '<a href='http://www.example.com'>http://www.example.com</a>',\n    success: function() {\n        console.log('Ok');\n    },\n    error: function() {\n        console.log('Error');\n    }\n});\n</code></pre>\n\n<p>Example #8 (Ajax POST request with successHTML and success callbacks)</p>\n\n<pre><code>tiramisu.ajax({\n   method : 'POST',\n   parameter: {\n        param_1 : 'variable 1',\n        param_2 : 'variable 2'\n    },\n   success: function(){ ... },\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #9 (Ajax set data_format)</p>\n\n<pre><code>tiramisu.ajax({\n   data_format: 'json',\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #10 (Ajax with start_load and end_load)</p>\n\n<pre><code>tiramisu.ajax({\n   start_load: function() {\n\n   },\n   end_load: function() {\n\n   },\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Example #11 (Ajax with time stop)</p>\n\n<pre><code>tiramisu.ajax({\n   stop : 2000,\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n</code></pre>\n\n<p>});</p>\n\n<p>Example #12 (If there is new request then to abort the past requests.)</p>\n\n<pre><code>tiramisu.ajax({\n   abort : true,\n   successHTML: 'responseWrapper',\n   url : '<a href='http://www.example.com'>http://www.example.com</a>');\n});\n</code></pre>\n\n<p>Error<br />- #1 : Object Ajax Error!;</p>\n\n<p>param {Object} settings An object containing the Ajax call parameters</p>", "summary": "<h1>Framework Ajax Module</h1>"}, "tags": [{"type": "api", "visibility": "public"}]}]