[{"ignore": false, "code": "tiramisu.modules.list_def = [];\ntiramisu.modules.get = function(selector) {\n\n    // Each module within Tiramisu can to need inherit other modules.\n    // The number of cups of coffee is identified for each module.\n    var ingredients = [2],\n        cups_of_coffee = 1;\n\n    this.selector = 'QSA';\n    this.native_qsa = (this.selector === 'QSA' && typeof this.d.querySelectorAll !== 'undefined' ? true : false);\n\n    function toArray(obj) {\n        var array = [];\n        // Zero-fill right shift to ensure that length is an UInt32\n        for (var i = obj.length; i--;) {\n            array[i] = obj[i];\n        }\n        return array;\n    }\n\n    var macros = {\n        'nl': '\\n|\\r\\n|\\r|\\f',\n        'nonascii': '[^\\0-\\177]',\n        'unicode': '\\\\[0-9A-Fa-f]{1,6}(\\r\\n|[\\s\\n\\r\\t\\f])?',\n        'escape': '#{unicode}|\\\\[^\\n\\r\\f0-9A-Fa-f]',\n        'nmchar': '[_A-Za-z0-9-]|#{nonascii}|#{escape}',\n        'nmstart': '[_A-Za-z]|#{nonascii}|#{escape}',\n        'ident': '[-@]?(#{nmstart})(#{nmchar})*',\n        'name': '(#{nmchar})+'\n    };\n\n    var rules = {\n        'id and name': '(#{ident}##{ident})',\n        'id': '(##{ident})',\n        'class': '(\\\\.#{ident})',\n        'name and class': '(#{ident}\\\\.#{ident})',\n        'element': '(#{ident})',\n        'pseudo class': '(:#{ident})'\n    };\n\n    // Normalize the selector\n\n    function normalize(text) {\n        return text.replace(/^\\s+|\\s+$/g, '').replace(/[ \\t\\r\\n\\f]+/g, ' ');\n    }\n\n    // Scan macros and rules to build a big regex\n    var scanner = function() {\n            function replacePattern(pattern, patterns) {\n                var matched = true,\n                    match;\n                while (matched) {\n                    match = pattern.match(/#\\{([^}]+)\\}/);\n                    if (match && match[1]) {\n                        pattern = pattern.replace(new RegExp('#\\{' + match[1] + '\\}', 'g'), patterns[match[1]]);\n                        matched = true;\n                    } else {\n                        matched = false;\n                    }\n                }\n                return pattern;\n            }\n\n            function escapePattern(text) {\n                return text.replace(/\\//g, '//');\n            }\n\n            function convertPatterns() {\n                var key, pattern, results = {},\n                    patterns, source;\n\n                if (arguments.length === 2) {\n                    source = arguments[0];\n                    patterns = arguments[1]\n                } else {\n                    source = arguments[0];\n                    patterns = arguments[0];\n                }\n\n                for (key in patterns) {\n                    pattern = escapePattern(replacePattern(patterns[key], source));\n                    results[key] = pattern;\n                }\n                return results;\n            }\n\n            function joinPatterns(regexps) {\n                var results = [],\n                    key;\n\n                for (key in regexps) {\n                    results.push(regexps[key]);\n                }\n\n                return new RegExp(results.join('|'), 'g');\n            }\n\n            return joinPatterns(convertPatterns(convertPatterns(macros), rules));\n        };\n\n    var filter = {\n        'byAttr': function(elements, attribute, value) {\n            var key, results = [];\n            for (key in elements) {\n                if (elements[key] && elements[key][attribute] === value) {\n                    results.push(elements[key]);\n                }\n            }\n            return results;\n        }\n    };\n\n    var find = {\n        'byId': function(root, id) {\n            return (root) ? [root.getElementById(id)] : [];\n        },\n\n        'byNodeName': function(root, tagName) {\n            if (root === null) return [];\n            var i, results = [],\n                nodes = root.getElementsByTagName(tagName);\n\n            for (i = 0; i < nodes.length; i++) {\n                results.push(nodes[i]);\n            }\n            return results;\n        },\n\n        'byClassName': function(root, className) {\n            if (root === null) return [];\n            var i, results = [],\n                nodes = root.getElementsByTagName('*');\n\n            for (i = 0; i < nodes.length; i++) {\n                if (nodes[i].className.match('\\\\b' + className + '\\\\b')) {\n                    results.push(nodes[i]);\n                }\n            }\n            return results;\n        }\n    };\n\n    var findMap = {\n        'id': function(root, selector) {\n            selector = selector.split('#')[1];\n            return find.byId(root, selector);\n        },\n\n        'name and id': function(root, selector) {\n            var matches = selector.split('#'),\n                name = matches[0],\n                id = matches[1];\n            return filter.byAttr(find.byId(root, id), 'nodeName', name.toUpperCase());\n        },\n\n        'name': function(root, selector) {\n            return find.byNodeName(root, selector);\n        },\n\n        'class': function(root, selector) {\n            selector = selector.split('\\.')[1];\n            return find.byClassName(root, selector);\n        },\n\n        'name and class': function(root, selector) {\n            var matches = selector.split('\\.'),\n                name = matches[0],\n                className = matches[1];\n            return filter.byAttr(find.byClassName(root, className), 'nodeName', name.toUpperCase());\n        }\n    };\n\n    var matchMap = {\n        'id': function(element, selector) {\n            selector = selector.split('#')[1];\n            return element && element.id === selector;\n        },\n\n        'name': function(element, nodeName) {\n            return element.nodeName === nodeName.toUpperCase();\n        },\n\n        'name and id': function(element, selector) {\n            return matchMap.id(element, selector) && matchMap.name(element, selector.split('#')[0]);\n        },\n\n        'class': function(element, selector) {\n            if (element && element.className) {\n                selector = selector.split('\\.')[1];\n                return element.className.match('\\\\b' + selector + '\\\\b');\n            }\n        },\n\n        'name and class': function(element, selector) {\n            return matchMap['class'](element, selector) && matchMap.name(element, selector.split('\\.')[0]);\n        }\n    };", "description": {"body": "<p>A CSS Parser for handling DOM elements.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>t.get(*SELECTOR*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a <em>valid</em> CSS selector or, alternatively, an object (see examples below).</p>\n\n<p>Tiramisu will use <em>querySelectorAll</em> if the current browser implements it; if not present <strong>Tiramisu</strong><br />fallback to a custom, simple CSS selector.</p>\n\n<p>This simple selector implementation is <em>cross-browser</em> and actually implements the following CSS rules:</p>\n\n<ul>\n<li><em>id and name</em>;</li>\n<li><em>id</em>;</li>\n<li><em>class</em>;</li>\n<li><em>name and class</em>;</li>\n<li><em>element</em>;</li>\n</ul>\n\n<p>Note that this implementation is not fast as <em>querySelectorAll</em> since it relies on pure<br />(<em>not optimized</em>) JavaScript.</p>\n\n<p>Example #1 (Select all li elements)</p>\n\n<pre><code>&lt;ul id=\"myList\"&gt;\n  &lt;li&gt; First. &lt;/li&gt;\n  &lt;li&gt; Second. &lt;/li&gt;\n  &lt;li&gt; Third. &lt;/li&gt;\n&lt;/ul&gt;\n...\nvar li = tiramisu.get('#myList li');\n</code></pre>\n\n<p>Example #2 (Select all li with class \u201cspecial\u201d)</p>\n\n<pre><code>&lt;ul id=\"myList\"&gt;\n  &lt;li&gt; First. &lt;/li&gt;\n  &lt;li class=\"special\"&gt; Second. &lt;/li&gt;\n  &lt;li&gt; Third. &lt;/li&gt;\n&lt;/ul&gt;\n...\nvar li_special1 = tiramisu.get('#myList .special');\n\n// Better way to do it :)\nvar li_special2 = tiramisu.get('#myList li.special');\n</code></pre>\n\n<p>param {String} selector A CSS Selector<br />returns {Object} The node list</p>\n\n<h2>Each iterator extension</h2>\n\n<p>Applies a callback function to a list of DOM nodes.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).each(*CALLBACK*)\n</code></pre>\n\n<p>Where <em>SELECTOR</em> is a valid CSS selector and <em>CALLBACK</em> a function object.</p>\n\n<p>It is common to retrieve a list of DOM nodes and then apply the <em>same</em> function to all of it's element:</p>\n\n<p>Example #1 (alert the innerHTML of every element in a list)</p>\n\n<pre><code>&lt;/ul&gt;\n...\ntiramisu.get('ul li').each(function() {\n    alert(this.innerHTML);\n});\n</code></pre>\n\n<p>As you can see, <strong>this</strong> is used for referencing the current iteration item.</p>\n\n<p>param {function} cb The callback function to apply</p>\n\n<h2>CSS handler extension</h2>\n\n<p>Alter the CSS properties of a list of DOM nodes.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).css(*CSS_PROPERTIES*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>CSS_PROPERTIES</em> is an object containing the CSS<br />properties to set.</p>\n\n<p>Example #1 (Set all h1 tags to 34px with color red)</p>\n\n<pre><code>&lt;h1&gt; This is one headline. &lt;/h1&gt;\n&lt;h1&gt; This is another headline. &lt;/h1&gt;\n...\ntiramisu.get('h1').css({\n    'font-size': '12px',\n    'color': 'red'\n});\n</code></pre>\n\n<p>Example #2 (Get attribute out of style)</p>\n\n<pre><code>&lt;h1 id=\"my_id\" style=\"color:red\"&gt; This is one headline. &lt;/h1&gt;\n...\ntiramisu.get('#my_id').css(\"color\")\n</code></pre>\n\n<p>param {Object} obj An object containing CSS properties</p>\n\n<h2>HTML extension method</h2>\n\n<p>Gets or sets the HTML Markup of the first CSS selector element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).html([*HTML*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>[HTML]</em> is an optional value to set the<br />element's innerHTML value.</p>\n\n<p>Example #1 (Getting the HTML value of a div)</p>\n\n<pre><code>&lt;div id=\"header\"&gt;\n  &lt;p&gt; I love pizza! &lt;/p&gt;\n&lt;/div&gt;\n...\nvar pizza = tiramisu.get('#header').html()\n</code></pre>\n\n<p>Example #2 (Setting the HTML value of a div)</p>\n\n<pre><code>&lt;div id=\"header\"&gt;\n  &lt;p&gt; I love pizza! &lt;/p&gt;\n&lt;/div&gt;\n...\ntiramisu.get('#header').html('&lt;p&gt; i hate cakes! &lt;/p&gt;');\n</code></pre>\n\n<p>param {String} [set] An optional string containing the HTML to replace<br />return {[String]} An optional string containing the selector's first element HTML value</p>\n\n<h2>Form field value extension method</h2>\n\n<p>Gets or sets the value of a form field of the first CSS Selector element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).value([*VALUE*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>[VALUE]</em> is an optional value to set the<br />element's innerHTML value.</p>\n\n<p>Example #1 (Get the current value of a select list)</p>\n\n<pre><code>&lt;form id=\"myForm\" action='#' method=\"GET\"&gt;\n  &lt;select&gt;\n    &lt;option&gt; Apple &lt;/option&gt;\n    &lt;option&gt; Strawberry &lt;/option&gt;\n    &lt;option&gt; Banana &lt;/option&gt;\n  &lt;/select&gt;\n&lt;/form&gt;\n...\n// The default selected value is \u201cApple\u201d\nvar current = t.get('myForm select').value();\n</code></pre>\n\n<p>Example #2 (Set the current value of a select list)</p>\n\n<pre><code>&lt;form id=\"myForm\" action='#' method=\"GET\"&gt;\n  &lt;select&gt;\n    &lt;option&gt; Apple &lt;/option&gt;\n    &lt;option&gt; Strawberry &lt;/option&gt;\n    &lt;option&gt; Banana &lt;/option&gt;\n  &lt;/select&gt;\n&lt;/form&gt;\n...\nt.get('myForm select').value('Strawberry');\n\n// Now the selected value is \u201cStrawberry\u201d\nvar current = t.get('myForm select').value();\n</code></pre>\n\n<p>Example #3 (Get the current values of a series of elements)</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"name_one\" value=\"one\" class=\"i_am_class\"&gt;\n&lt;input type=\"hidden\" name=\"name_two\" value=\"two\" class=\"i_am_class\"&gt;\n&lt;input type=\"hidden\" name=\"name_three\" value=\"three\" class=\"i_am_class\"&gt;\n&lt;input type=\"hidden\" name=\"name_four\" value=\"four\" class=\"i_am_class\"&gt;\n...\nt.get('.i_am_class').value(); // ['one', 'two', 'three', 'four']\n</code></pre>\n\n<p>param {String} [set] An optional string containing the field value to set<br />return {[String]} An optional string containing the selector's first element field value</p>\n\n<h2>Focus extension method</h2>\n\n<p>Set focus on elements</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).focus()\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector</p>\n\n<p>Example #1 (Set focus on elements)</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).focus()\n</code></pre>", "full": "<h1>Framework Selector Module</h1>\n\n<p>A CSS Parser for handling DOM elements.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>t.get(*SELECTOR*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a <em>valid</em> CSS selector or, alternatively, an object (see examples below).</p>\n\n<p>Tiramisu will use <em>querySelectorAll</em> if the current browser implements it; if not present <strong>Tiramisu</strong><br />fallback to a custom, simple CSS selector.</p>\n\n<p>This simple selector implementation is <em>cross-browser</em> and actually implements the following CSS rules:</p>\n\n<ul>\n<li><em>id and name</em>;</li>\n<li><em>id</em>;</li>\n<li><em>class</em>;</li>\n<li><em>name and class</em>;</li>\n<li><em>element</em>;</li>\n</ul>\n\n<p>Note that this implementation is not fast as <em>querySelectorAll</em> since it relies on pure<br />(<em>not optimized</em>) JavaScript.</p>\n\n<p>Example #1 (Select all li elements)</p>\n\n<pre><code>&lt;ul id=\"myList\"&gt;\n  &lt;li&gt; First. &lt;/li&gt;\n  &lt;li&gt; Second. &lt;/li&gt;\n  &lt;li&gt; Third. &lt;/li&gt;\n&lt;/ul&gt;\n...\nvar li = tiramisu.get('#myList li');\n</code></pre>\n\n<p>Example #2 (Select all li with class \u201cspecial\u201d)</p>\n\n<pre><code>&lt;ul id=\"myList\"&gt;\n  &lt;li&gt; First. &lt;/li&gt;\n  &lt;li class=\"special\"&gt; Second. &lt;/li&gt;\n  &lt;li&gt; Third. &lt;/li&gt;\n&lt;/ul&gt;\n...\nvar li_special1 = tiramisu.get('#myList .special');\n\n// Better way to do it :)\nvar li_special2 = tiramisu.get('#myList li.special');\n</code></pre>\n\n<p>param {String} selector A CSS Selector<br />returns {Object} The node list</p>\n\n<h2>Each iterator extension</h2>\n\n<p>Applies a callback function to a list of DOM nodes.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).each(*CALLBACK*)\n</code></pre>\n\n<p>Where <em>SELECTOR</em> is a valid CSS selector and <em>CALLBACK</em> a function object.</p>\n\n<p>It is common to retrieve a list of DOM nodes and then apply the <em>same</em> function to all of it's element:</p>\n\n<p>Example #1 (alert the innerHTML of every element in a list)</p>\n\n<pre><code>&lt;/ul&gt;\n...\ntiramisu.get('ul li').each(function() {\n    alert(this.innerHTML);\n});\n</code></pre>\n\n<p>As you can see, <strong>this</strong> is used for referencing the current iteration item.</p>\n\n<p>param {function} cb The callback function to apply</p>\n\n<h2>CSS handler extension</h2>\n\n<p>Alter the CSS properties of a list of DOM nodes.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).css(*CSS_PROPERTIES*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>CSS_PROPERTIES</em> is an object containing the CSS<br />properties to set.</p>\n\n<p>Example #1 (Set all h1 tags to 34px with color red)</p>\n\n<pre><code>&lt;h1&gt; This is one headline. &lt;/h1&gt;\n&lt;h1&gt; This is another headline. &lt;/h1&gt;\n...\ntiramisu.get('h1').css({\n    'font-size': '12px',\n    'color': 'red'\n});\n</code></pre>\n\n<p>Example #2 (Get attribute out of style)</p>\n\n<pre><code>&lt;h1 id=\"my_id\" style=\"color:red\"&gt; This is one headline. &lt;/h1&gt;\n...\ntiramisu.get('#my_id').css(\"color\")\n</code></pre>\n\n<p>param {Object} obj An object containing CSS properties</p>\n\n<h2>HTML extension method</h2>\n\n<p>Gets or sets the HTML Markup of the first CSS selector element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).html([*HTML*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>[HTML]</em> is an optional value to set the<br />element's innerHTML value.</p>\n\n<p>Example #1 (Getting the HTML value of a div)</p>\n\n<pre><code>&lt;div id=\"header\"&gt;\n  &lt;p&gt; I love pizza! &lt;/p&gt;\n&lt;/div&gt;\n...\nvar pizza = tiramisu.get('#header').html()\n</code></pre>\n\n<p>Example #2 (Setting the HTML value of a div)</p>\n\n<pre><code>&lt;div id=\"header\"&gt;\n  &lt;p&gt; I love pizza! &lt;/p&gt;\n&lt;/div&gt;\n...\ntiramisu.get('#header').html('&lt;p&gt; i hate cakes! &lt;/p&gt;');\n</code></pre>\n\n<p>param {String} [set] An optional string containing the HTML to replace<br />return {[String]} An optional string containing the selector's first element HTML value</p>\n\n<h2>Form field value extension method</h2>\n\n<p>Gets or sets the value of a form field of the first CSS Selector element.</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).value([*VALUE*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>[VALUE]</em> is an optional value to set the<br />element's innerHTML value.</p>\n\n<p>Example #1 (Get the current value of a select list)</p>\n\n<pre><code>&lt;form id=\"myForm\" action='#' method=\"GET\"&gt;\n  &lt;select&gt;\n    &lt;option&gt; Apple &lt;/option&gt;\n    &lt;option&gt; Strawberry &lt;/option&gt;\n    &lt;option&gt; Banana &lt;/option&gt;\n  &lt;/select&gt;\n&lt;/form&gt;\n...\n// The default selected value is \u201cApple\u201d\nvar current = t.get('myForm select').value();\n</code></pre>\n\n<p>Example #2 (Set the current value of a select list)</p>\n\n<pre><code>&lt;form id=\"myForm\" action='#' method=\"GET\"&gt;\n  &lt;select&gt;\n    &lt;option&gt; Apple &lt;/option&gt;\n    &lt;option&gt; Strawberry &lt;/option&gt;\n    &lt;option&gt; Banana &lt;/option&gt;\n  &lt;/select&gt;\n&lt;/form&gt;\n...\nt.get('myForm select').value('Strawberry');\n\n// Now the selected value is \u201cStrawberry\u201d\nvar current = t.get('myForm select').value();\n</code></pre>\n\n<p>Example #3 (Get the current values of a series of elements)</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"name_one\" value=\"one\" class=\"i_am_class\"&gt;\n&lt;input type=\"hidden\" name=\"name_two\" value=\"two\" class=\"i_am_class\"&gt;\n&lt;input type=\"hidden\" name=\"name_three\" value=\"three\" class=\"i_am_class\"&gt;\n&lt;input type=\"hidden\" name=\"name_four\" value=\"four\" class=\"i_am_class\"&gt;\n...\nt.get('.i_am_class').value(); // ['one', 'two', 'three', 'four']\n</code></pre>\n\n<p>param {String} [set] An optional string containing the field value to set<br />return {[String]} An optional string containing the selector's first element field value</p>\n\n<h2>Focus extension method</h2>\n\n<p>Set focus on elements</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).focus()\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector</p>\n\n<p>Example #1 (Set focus on elements)</p>\n\n<pre><code>tiramisu.get(*SELECTOR*).focus()\n</code></pre>", "summary": "<h1>Framework Selector Module</h1>"}, "tags": []}, {"code": "function Token(identity, finder) {\n        this.identity = identity;\n        this.finder = finder;\n    }\n\n    Token.prototype.toString = function() {\n        return 'identity: ' + this.identity + ', finder: ' + this.finder;\n    };", "description": {"body": "", "full": "<p>Models a Token class.</p>", "summary": "<p>Models a Token class.</p>"}, "tags": [{"type": "param", "name": "identity", "types": ["String"], "description": "The original selector rule;"}, {"type": "param", "name": "finder", "types": ["String"], "description": "The category of the selector;"}, {"type": "api", "visibility": "private"}], "ctx": {"type": "function", "name": "Token", "string": "Token()"}, "ignore": false, "isPrivate": true}, {"code": "function Tokenizer(selector) {\n        this.selector = normalize(selector);\n        this.tokens = [];\n        this.tokenize();\n    }\n\n    Tokenizer.prototype.tokenize = function() {\n        var match, r, finder;\n\n        r = scanner();\n        r.lastIndex = 0;\n\n        while (match = r.exec(this.selector)) {\n            finder = null;\n\n            if (match[10]) {\n                finder = 'id';\n            } else if (match[1]) {\n                finder = 'name and id';\n            } else if (match[15]) {\n                finder = 'class';\n            } else if (match[20]) {\n                finder = 'name and class';\n            } else if (match[29]) {\n                finder = 'name';\n            }\n\n            this.tokens.push(new Token(match[0], finder));\n        }\n        return this.tokens;\n    };", "description": {"body": "", "full": "<p>Classify sections of the scanner output.</p>", "summary": "<p>Classify sections of the scanner output.</p>"}, "tags": [{"type": "param", "name": "selector", "types": ["String"], "description": "A CSS selector;"}, {"type": "api", "visibility": "private"}], "ctx": {"type": "function", "name": "Tokenizer", "string": "Tokenizer()"}, "ignore": false, "isPrivate": true}, {"code": "function Searcher(root, tokens) {\n        this.root = root;\n        this.key_selector = tokens.pop();\n        this.tokens = tokens;\n        this.results = [];\n    }\n\n    Searcher.prototype.find = function(token) {\n        if (!findMap[token.finder]) {\n            throw new Error('Invalid Finder: ' + token.finder);\n        }\n        return findMap[token.finder](this.root, token.identity);\n    };\n\n    Searcher.prototype.matchesToken = function(element, token) {\n        if (!matchMap[token.finder]) {\n            throw new Error('Invalid Matcher: ' + token.finder);\n        }\n        return matchMap[token.finder](element, token.identity);\n    };\n\n    Searcher.prototype.matchesAllRules = function(element) {\n        if (this.tokens.length === 0) return;\n\n        var i = this.tokens.length - 1,\n            token = this.tokens[i],\n            matchFound = false;\n\n        while (i >= 0 && element) {\n            if (this.matchesToken(element, token)) {\n                matchFound = true;\n                i--;\n                token = this.tokens[i];\n            }\n            element = element.parentNode;\n        }\n\n        return matchFound && i < 0;\n    };\n\n    Searcher.prototype.parse = function() {\n        var i, element, elements = this.find(this.key_selector),\n            results = [];\n\n        // Each element that matches the key selector is used as a \n        // starting point. Its ancestors are analysed to see \n        // if they match all of the selector\u2019s rules.\n        for (i = 0; i < elements.length; i++) {\n            element = elements[i];\n            if (this.tokens.length > 0) {\n                if (this.matchesAllRules(element.parentNode)) {\n                    results.push(element);\n                }\n            } else {\n                if (this.matchesToken(element, this.key_selector)) {\n                    results.push(element);\n                }\n            }\n        }\n        return results;\n    };\n\n    // The result variable\n    var results;\n\n    if (typeof selector === 'string') {\n\n        if (this.native_qsa) {\n            // Use querySelectorAll\n            results = toArray(t.d.querySelectorAll(selector));\n        } else {\n            // Use the built-in CSS Selector\n            var lexer = new Tokenizer(selector);\n\n            // Exposing lexer for testing purposes\n            Tiramisu.prototype.tokenize = new Tokenizer(selector);\n            var parser = new Searcher(document, lexer.tokens),\n                results = parser.parse();\n        }\n    } else {\n        // Selector is not a string so return it as 1-item list\n        results = [selector];\n    }\n\n    // Keeps the number of results obtained from the selector\n    var len_result = results.length;\n\n    // Exposing basic methods\n    var methods = {\n\n        'each': function(cb) {\n            var i;\n            for (i = 0; i < results.length; i++) {\n                cb.apply(results[i]);\n            }\n            return this;\n        },\n\n        'css': function(obj) {\n            var i, key, browser = t.detect('browser'),\n                ie_older = t.detect('isIEolder'),\n                ie = t.detect('isIE');\n\n            // For handling IE CSS Attributes\n            var attr = {\n                'opacity': function(obj, value) {\n                    if (value !== undefined) {\n                        // Setter\n                        if (ie) {\n                            obj.style.opacity = value;\n                            obj.style.filter = 'alpha(opacity=' + value * 100 + ')';\n                        } else {\n                            obj.style.opacity = value;\n                        }\n                    } else {\n                        // Getter\n                        return obj.style.opacity\n                    }\n                },\n                'border-radius': function(obj, value) {\n                    if (value) {\n                        if (browser === 'f3') {\n                            obj.style.MozBorderRadius = value; // Firefox 3.6 <=\n                        }\n                    } else {\n                        if (browser === 'f3') {\n                            return obj.style.MozBorderRadius;\n                        } else if (browser === 'ie9+') {\n                            return obj.style.borderRadius;\n                        }\n                    }\n                }\n            };\n\n            if (typeof(obj) === 'string') {\n                if (ie || browser === 'f3') {\n                    if (obj == 'border-radius') {\n                        return attr[obj](results[0])\n                    }\n                    return results[0].style[obj];\n                }\n                return results[0].style[obj];\n            }\n\n            // Apply to all elements\n            for (i = len_result; i--;) {\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        // Need to handle different browsers\n                        if (ie || browser === 'f3') {\n                            if (attr[key] !== undefined) {\n                                attr[key](results[i], obj[key]);\n                            } else {\n                                // No match in attr\n                                results[i].style[key] = obj[key];\n                            }\n                        } else {\n                            // The third param is for W3C Standard\n                            results[i].style.setProperty(key, obj[key], '');\n                        }\n                    }\n                }\n            }\n            return this;\n        },\n\n        'html': function(set) {\n            if (set !== undefined) {\n                results[0].innerHTML = set;\n            } else {\n                return results[0].innerHTML;\n            }\n            return this;\n        },\n\n        'value': function(set) {\n            var value = function(i) {\n                    if (t.detect('isIE') || t.detect('isIEolder')) {\n                        if (results[i].type == 'select-one') {\n                            return results[i].options[results[i].selectedIndex].value;\n                        }\n                        return results[i].value;\n                    }\n                    return results[i].value;\n                };\n\n            var setValue = function(i, s) {\n                    if (t.detect('isIE') || t.detect('isIEolder')) {\n                        if (results[i].type == 'select-one') {\n                            results[i].options[results[i].selectedIndex].value = s;\n                        }\n                        results[i].value = s;\n                    } else {\n                        results[i].value = s;\n                    }\n                };\n\n            if (results[0] === undefined) {\n                return '';\n            }\n\n            if (set !== undefined) {\n                setValue(0, set);\n            } else {\n                if (len_result > 1) {\n                    var list = [];\n                    for (i = 0; i < len_result; i++) {\n                        list.push(value(i));\n                    }\n                    return list;\n                }\n                return value(0);\n            }\n        },\n\n        'focus': function() {\n            for (var i = len_result; i--;) {\n                results[i].focus();\n            }\n        },", "description": {"body": "", "full": "<p>Uses an array of tokens to perform DOM operations.</p>", "summary": "<p>Uses an array of tokens to perform DOM operations.</p>"}, "tags": [{"type": "param", "name": "root", "types": ["HTMLNode"], "description": "The starting DOM node;"}, {"type": "param", "name": "tokens", "types": ["Array"], "description": "An array containing tokens;"}, {"type": "api", "visibility": "private"}], "ctx": {"type": "function", "name": "Searcher", "string": "Searcher()"}, "ignore": false, "isPrivate": true}, {"isPrivate": false, "ignore": false, "code": "'attr': function(attr, value, add) {\n            // A list with the desired attribute for each result.\n            var list_attr = [];\n\n            // The good way to eliminate a work repetition in functions is through lazy loading.\n            var get_or_set_value = function() {\n                    if (value !== undefined) {\n                        // set value\n                        get_or_set_value = function() {\n                            for (var i = len_result; i--;) {\n                                if (attr === 'class') {\n                                    if (add) {\n                                        results[i].className = results[i].className + ' ' + value;\n                                    } else {\n                                        results[i].className = value;\n                                    }\n                                } else {\n                                    results[i].setAttribute(attr, value);\n                                }\n                            }\n                        }\n                    } else {\n                        // get value\n                        get_or_set_value = function() {\n                            for (var i = len_result; i--;) {\n                                if (attr === 'class') {\n                                    list_attr.push(results[i].className);\n                                } else {\n                                    list_attr.push(results[i].getAttribute(attr));\n                                }\n                            }\n                            return list_attr;\n                        }\n                    }\n                    return get_or_set_value();\n                }\n\n                // set_value returns undefined when used so return this \n                // else return list_attr (get value)\n            return get_or_set_value() || this;\n        },", "description": {"body": "<p>Gets or sets the attribute of an element.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).attr(*ATTRIBUTE*, [*VALUE*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector,<em>ATTRIBUTE</em> is the name of<br />the attribute and <em>[VALUE]</em> is an optional value for setting the attribute.</p>\n\n<h2>Example #1 (Get the current src of an image)</h2>\n\n<pre><code>&lt;img src=\"www.example.com/image_num_one.png\" id=\"id_image\" /&gt;\n...\nvar current = t.get('#id_image').attr('src');\n</code></pre>\n\n<h2>Example #2 (Set the current src of an image)</h2>\n\n<pre><code>&lt;img src=\"www.example.com/image_num_one.png\" id=\"id_image\" /&gt;\n...\nt.get('#id_image').attr('src', 'www.example.com/image_num_two.png');\n</code></pre>\n\n<h2>Example #3 (Set the class)</h2>\n\n<pre><code>&lt;p class=\"old_class old_class_two\"&gt;Hi class&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('p').attr('class', 'new_class')</em> will give the following results:</p>\n\n<pre><code>&lt;p class=\"new_class\"&gt;Hi class&lt;/p&gt;\n</code></pre>\n\n<h2>Example #4 (Set the class)</h2>\n\n<pre><code>&lt;p class=\"old_class old_class_two\"&gt;Hi class&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('p').attr('class', 'new_class', true)</em> will give the following results:</p>\n\n<pre><code>&lt;p class=\"old_class old_class_two new_class\"&gt;Hi class&lt;/p&gt;\n</code></pre>", "full": "<h2>Attribute extension method</h2>\n\n<p>Gets or sets the attribute of an element.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).attr(*ATTRIBUTE*, [*VALUE*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector,<em>ATTRIBUTE</em> is the name of<br />the attribute and <em>[VALUE]</em> is an optional value for setting the attribute.</p>\n\n<h2>Example #1 (Get the current src of an image)</h2>\n\n<pre><code>&lt;img src=\"www.example.com/image_num_one.png\" id=\"id_image\" /&gt;\n...\nvar current = t.get('#id_image').attr('src');\n</code></pre>\n\n<h2>Example #2 (Set the current src of an image)</h2>\n\n<pre><code>&lt;img src=\"www.example.com/image_num_one.png\" id=\"id_image\" /&gt;\n...\nt.get('#id_image').attr('src', 'www.example.com/image_num_two.png');\n</code></pre>\n\n<h2>Example #3 (Set the class)</h2>\n\n<pre><code>&lt;p class=\"old_class old_class_two\"&gt;Hi class&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('p').attr('class', 'new_class')</em> will give the following results:</p>\n\n<pre><code>&lt;p class=\"new_class\"&gt;Hi class&lt;/p&gt;\n</code></pre>\n\n<h2>Example #4 (Set the class)</h2>\n\n<pre><code>&lt;p class=\"old_class old_class_two\"&gt;Hi class&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('p').attr('class', 'new_class', true)</em> will give the following results:</p>\n\n<pre><code>&lt;p class=\"old_class old_class_two new_class\"&gt;Hi class&lt;/p&gt;\n</code></pre>", "summary": "<h2>Attribute extension method</h2>"}, "tags": [{"type": "param", "name": "[set]", "types": ["String"], "description": "An optional string containing the field src to set"}, {"type": "return", "description": "An optional string containing the selector's first element field src", "types": ["[String]"]}]}, {"ignore": false, "code": "'ready': function(def) {\n            t.list_def.push(def);\n            t.d.onreadystatechange = function() {\n                if (t.d.readyState == \"complete\") {\n\n                    var len = t.list_def.length;\n                    for (var i = 0; i < len; i++) {\n                        var def = t.list_def[i];\n                        // Run the callback\n                        def();\n                    }\n\n                    return this;\n\n                }\n            }\n        },", "description": {"body": "<p>Make sure that DOM elements exist when it run the events.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).ready(*FUNCTION*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector (containing <em>one</em> or <em>more</em> elements)<br />and <em>FUNCTION</em> is the function to execute when the DOM is ready.</p>\n\n<h2>Example #1</h2>\n\n<pre><code>t.get(document).ready(function(){\n     alert('This will be executed when the dom is ready\");\n});\n</code></pre>", "full": "<h2>Ready method</h2>\n\n<p>Make sure that DOM elements exist when it run the events.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).ready(*FUNCTION*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector (containing <em>one</em> or <em>more</em> elements)<br />and <em>FUNCTION</em> is the function to execute when the DOM is ready.</p>\n\n<h2>Example #1</h2>\n\n<pre><code>t.get(document).ready(function(){\n     alert('This will be executed when the dom is ready\");\n});\n</code></pre>", "summary": "<h2>Ready method</h2>"}, "tags": []}, {"isPrivate": false, "ignore": false, "code": "'index': function(el) {\n            if (el !== undefined) {\n                for (var i = len_result; i >= 0; i--) {\n                    if (results[i] === el) break;\n                }\n                return i;\n            }\n        },", "description": {"body": "<p>Get the index position of an element.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).index(*ELEMENT*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>ELEMENT</em> is the DOM element<br />to search.</p>\n\n<p>The function returns -1 if no element is found.</p>\n\n<h2>Example #1 (Get the index of a selector element)</h2>\n\n<pre><code>&lt;p&gt;This&lt;/p&gt;      // element 0\n&lt;p&gt;is&lt;/p&gt;        // element 1\n&lt;p&gt;Sparta!&lt;/p&gt;   // element 2\n...\nvar el = t.get('p')[2];\nvar index = t.get('p').index(el); // Contains '2';\n</code></pre>", "full": "<h2>Index extension method</h2>\n\n<p>Get the index position of an element.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).index(*ELEMENT*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>ELEMENT</em> is the DOM element<br />to search.</p>\n\n<p>The function returns -1 if no element is found.</p>\n\n<h2>Example #1 (Get the index of a selector element)</h2>\n\n<pre><code>&lt;p&gt;This&lt;/p&gt;      // element 0\n&lt;p&gt;is&lt;/p&gt;        // element 1\n&lt;p&gt;Sparta!&lt;/p&gt;   // element 2\n...\nvar el = t.get('p')[2];\nvar index = t.get('p').index(el); // Contains '2';\n</code></pre>", "summary": "<h2>Index extension method</h2>"}, "tags": [{"type": "param", "name": "the", "types": ["Object"], "description": "element to search (that is, a DOM element, not a *string*)"}, {"type": "return", "description": "the index of the element if found, -1 otherwise", "types": ["index"]}]}, {"ignore": false, "code": "'filter': function(selector) {\n            var selectors = {\n                ':odd': function(index) {\n                    return (index % 2 !== 0) ? true : false;\n                },\n                ':even': function(index) {\n                    return (index % 2 === 0) ? true : false;\n                }\n            };\n\n            if (typeof selector === 'string' && typeof selectors[selector] === 'function') {\n                for (var i = len_result; i--;) {\n                    !selectors[selector](i) && results.splice(i, 1);\n                }\n            } else if (typeof selector === 'function') {\n                for (var i = len_result; i--;) {\n                    !selector(i) && results.splice(i, 1);\n                }\n            }\n\n            len_result = results.length;\n\n            return this;\n        },", "description": {"body": "<p>Filters a selector or a custom function to the CSS Selector list's results.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).filter([*FILTER*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector, <em>FILTER</em> is a built-in filter (see the list below)<br />or can be defined as a custom function.</p>\n\n<h2>Currently implemented filters are</h2>\n\n<ul>\n<li><em>:odd</em>;</li>\n<li><em>:even</em>;</li>\n</ul>\n\n<h2>Custom filter functions</h2>\n\n<p>A custom filter function <strong>must</strong> conform to the following scheme:</p>\n\n<pre><code>function([index]) {\n    ...code here...\n    return true or false;\n}\n</code></pre>\n\n<p>where <strong>index</strong> is an optional index which can be used to perform the filter's choices.</p>\n\n<h2>Example #1 (Filtering even elements by using the built-in filter)</h2>\n\n<pre><code>&lt;p&gt;Zero&lt;/p&gt;\n&lt;p&gt;One&lt;/p&gt;\n&lt;p&gt;Two&lt;/p&gt;\n&lt;p&gt;Three&lt;/p&gt;\n...\nt.get('p').filter(':even')\n</code></pre>\n\n<p>gives the following selector list:</p>\n\n<pre><code> [&lt;p&gt;Zero&lt;/p&gt;, &lt;p&gt;Two&lt;/p&gt;]\n</code></pre>\n\n<h2>Example #2 (Filtering elements by using a custom function)</h2>\n\n<pre><code> &lt;p&gt;Zero&lt;/p&gt;\n &lt;p&gt;One&lt;/p&gt;\n &lt;p&gt;Two&lt;/p&gt;\n &lt;p&gt;Three&lt;/p&gt;\n ...\n t.get('p').filter(function(index) {\n     return (index === 2) ? true : false;\n });\n</code></pre>", "full": "<h2>Filter extension method</h2>\n\n<p>Filters a selector or a custom function to the CSS Selector list's results.</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).filter([*FILTER*])\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector, <em>FILTER</em> is a built-in filter (see the list below)<br />or can be defined as a custom function.</p>\n\n<h2>Currently implemented filters are</h2>\n\n<ul>\n<li><em>:odd</em>;</li>\n<li><em>:even</em>;</li>\n</ul>\n\n<h2>Custom filter functions</h2>\n\n<p>A custom filter function <strong>must</strong> conform to the following scheme:</p>\n\n<pre><code>function([index]) {\n    ...code here...\n    return true or false;\n}\n</code></pre>\n\n<p>where <strong>index</strong> is an optional index which can be used to perform the filter's choices.</p>\n\n<h2>Example #1 (Filtering even elements by using the built-in filter)</h2>\n\n<pre><code>&lt;p&gt;Zero&lt;/p&gt;\n&lt;p&gt;One&lt;/p&gt;\n&lt;p&gt;Two&lt;/p&gt;\n&lt;p&gt;Three&lt;/p&gt;\n...\nt.get('p').filter(':even')\n</code></pre>\n\n<p>gives the following selector list:</p>\n\n<pre><code> [&lt;p&gt;Zero&lt;/p&gt;, &lt;p&gt;Two&lt;/p&gt;]\n</code></pre>\n\n<h2>Example #2 (Filtering elements by using a custom function)</h2>\n\n<pre><code> &lt;p&gt;Zero&lt;/p&gt;\n &lt;p&gt;One&lt;/p&gt;\n &lt;p&gt;Two&lt;/p&gt;\n &lt;p&gt;Three&lt;/p&gt;\n ...\n t.get('p').filter(function(index) {\n     return (index === 2) ? true : false;\n });\n</code></pre>", "summary": "<h2>Filter extension method</h2>"}, "tags": []}, {"ignore": false, "code": "'removeClass': function(el) {\n            var i, j, text, all = false;\n\n            if (el === ':all') {\n                el = undefined;\n                var all = true;\n            }\n\n            if (el !== undefined && typeof el === 'string') {\n\n                var re = new RegExp('(\\\\s|^)' + el + '(\\\\s|$)');\n                // Remove class into element\n                for (i = len_result; i--;) {\n                    text = results[i].className.replace(re, '');\n                    results[i].className = text;\n                }\n            } else {\n                for (i = len_result; i--;) {\n                    // Remove all class into element\n                    results[i].className = '';\n\n                    // Remove all class into child\n                    if (all) {\n                        var list_child = results[i].childNodes,\n                            len = list_child.length;\n\n                        if (len > 0) {\n                            (function(list, len) {\n                                for (var j = len; j--;) {\n                                    list[j].className = '';\n                                    var new_list = list[j].childNodes,\n                                        new_len = new_list.length;\n                                    if (new_len > 0) {\n                                        arguments.callee(new_list, new_len);\n                                    }\n                                }\n                            })(list_child, len);\n                        }\n                    }\n                }\n            }\n            return this;\n        }\n    };\n\n    // Append methods to the result object\n    (function append_methods() {\n        var key;\n\n        for (key in methods) {\n            // returns an empty string inside a function if selector result is empty \n            if (len_result) {\n                results[key] = methods[key];\n            } else {\n                results[key] = function() {\n                    return '';\n                };\n            }\n        }\n\n        if (typeof(tiramisu.modules.get.methods) !== 'undefined') {\n\n            // Addictional methods\n            for (key in tiramisu.modules.get.methods) {\n                for (method in tiramisu.modules.get.methods[key]) {\n                    if (len_result) {\n                        results[method] = tiramisu.modules.get.methods[key][method];\n                    } else {\n                        results[method] = function() {\n                            return '';\n                        };\n                    }\n                }\n            }\n        }\n    })();\n    // Exposing results\n    tiramisu.get.results = results;\n    // Exposing selector\n    tiramisu.get.selector = selector;\n\n    return results;\n};\n\n// Allocate methods object\ntiramisu.modules.get.methods = tiramisu.modules.get.methods || {};", "description": {"body": "<p>Removes class</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).removeClass(*CLASS*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>CLASS</em> is class name</p>\n\n<h2>Example #1 (Remove class of the element)</h2>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class my_class_two\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('#tasty').removeClass('my_class_two')</em> will give the following results:</p>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<h2>Example #2 (Remove all class of the element)</h2>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class my_class_two\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('#tasty').removeClass()</em> will give the following results:</p>\n\n<pre><code>&lt;p id=\"tasty\" class=\"\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<h2>Example #3 (Remove all class of the element and child)</h2>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class\"&gt;\n     &lt;span class=\"my_class_one\"&gt;Hi one&lt;/span&gt;\n     &lt;span class=\"my_class_two\"&gt;Hi two&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('#tasty').removeClass(':all')</em> will give the following results:</p>\n\n<pre><code>&lt;p id=\"tasty\" class=\"\"&gt;\n     &lt;span class=\"\"&gt;Hi one&lt;/span&gt;\n     &lt;span class=\"\"&gt;Hi two&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>", "full": "<h2>Remove Class extension method</h2>\n\n<p>Removes class</p>\n\n<h2>Usage</h2>\n\n<pre><code>tiramisu.get(*SELECTOR*).removeClass(*CLASS*)\n</code></pre>\n\n<p>where <em>SELECTOR</em> is a valid CSS selector and <em>CLASS</em> is class name</p>\n\n<h2>Example #1 (Remove class of the element)</h2>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class my_class_two\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('#tasty').removeClass('my_class_two')</em> will give the following results:</p>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<h2>Example #2 (Remove all class of the element)</h2>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class my_class_two\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('#tasty').removeClass()</em> will give the following results:</p>\n\n<pre><code>&lt;p id=\"tasty\" class=\"\"&gt;Hi Gianluca&lt;/p&gt;\n</code></pre>\n\n<h2>Example #3 (Remove all class of the element and child)</h2>\n\n<pre><code>&lt;p id=\"tasty\" class=\"my_class\"&gt;\n     &lt;span class=\"my_class_one\"&gt;Hi one&lt;/span&gt;\n     &lt;span class=\"my_class_two\"&gt;Hi two&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>calling <em>t.get('#tasty').removeClass(':all')</em> will give the following results:</p>\n\n<pre><code>&lt;p id=\"tasty\" class=\"\"&gt;\n     &lt;span class=\"\"&gt;Hi one&lt;/span&gt;\n     &lt;span class=\"\"&gt;Hi two&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>", "summary": "<h2>Remove Class extension method</h2>"}, "tags": []}]