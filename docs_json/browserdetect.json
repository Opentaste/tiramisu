[{"isPrivate": false, "ignore": false, "code": "tiramisu.modules.detect = function(key) {\n\n    // Each module within Tiramisu can to need inherit other modules.\n    // The number of cups of coffee is identified for each module.\n    var ingredients = [1],\n        cups_of_coffee = 2;\n\n    var nav_agent = navigator.userAgent,\n        nav_name = navigator.appName;\n\n    // Netscape includes Firefox, Safari or Chrome\n    var tests = {\n\n        'browser': function() {\n            if (nav_name === 'Netscape') {\n                var firefox = nav_agent.substring(nav_agent.indexOf('Firefox'));\n                if (firefox.split('/')[0] !== 'Firefox') { // Case 1 - Safari or Chrome\n                    return \"webkit\"\n                } else {\n                    firefox_version = parseInt(firefox.split('/')[1].split('.')[0]);\n                    if (firefox_version > 3.8) { // Case 2 - Firefox 4\n                        return 'f4+'\n                    }\n                    return 'f3'\n                }\n            } else if (nav_name == 'Opera') {\n                var opera = nav_agent.substring(nav_agent.indexOf('Version')).split(\"/\")[1]\n                if (opera.split('.')[1] > 49) { // Case 4 - Opera 10.5+\n                    return 'o10.5+'\n                }\n                return 'o10.4';\n            } else if (/MSIE (\\d+\\.\\d+);/.test(nav_agent)) { //test for MSIE x.x;\n                var ie = new Number(RegExp.$1) // capture x.x portion and store as a number\n                if (ie > 8) {\n                    return 'ie9+';\n                } else if (ie == 8) {\n                    return 'ie8';\n                }\n                return 'ie7';\n            } else { // Case 6 - IE or other\n                return 'other';\n            }\n        },\n\n        'isIE': function() {\n            return this.browser() === 'ie9+' || this.browser() === 'ie8' || this.browser() === 'ie7';\n        },\n\n        'isIEolder': function() {\n            return this.browser() === 'ie8' || this.browser() === 'ie7';\n        },\n\n        'isFirefox': function() {\n            return this.browser() === \"f3\" || this.browser() === \"f4+\"\n        },\n\n        'isWebkit': function() {\n            return this.browser() === 'webkit'\n        },\n\n        'color': function() {\n            if (this.isIEolder()) {\n                return false;\n            }\n            return true;\n        }\n    };\n    return tests[key]();\n};", "description": {"body": "<p>This module is mainly used to perform several <em>browser-detection tests</em>:</p>\n\n<ul>\n<li>browser</li>\n<li>isIE, isFirefox, isChrome</li>\n<li>querySelectorAll</li>\n<li>opacity, color</li>\n</ul>\n\n<h2>Compatibility for not support CSS</h2>\n\n<ul>\n<li>position:fixed - iOS Safari / Opera Mini</li>\n<li>CSS3 Opacity - I8 older using the \"filter\" property</li>\n<li>CSS3 Colors - I8 older using rgb rather than rgba</li>\n</ul>\n\n<p>Example #1 (Detect browser)</p>\n\n<p>Here's an example on how to <em>detect</em> the current browser:</p>\n\n<pre><code>if (tiramisu.detect('browser') === 'IE9')) {\n    console.log('IE');\n}\n</code></pre>\n\n<h2>A shortcut to perform this check is</h2>\n\n<pre><code>if (tiramisu.detect('isIE')) {\n    console.log('IE');\n}\n</code></pre>\n\n<p>The main difference between the first and the second example is that <em>isIE</em> and, in general, <em>is(X)</em><br />methods doesn't check the browser for a specific version.</p>\n\n<p>If you need to perform a check for a specific version you'll need to rely on <em>detect('browser')</em>;<br />the possible return values are:</p>\n\n<ul>\n<li><em>safarichrome</em>;</li>\n<li><em>firefox3</em>;</li>\n<li><em>firefox4</em>;</li>\n<li><em>Opera10.4</em>;</li>\n<li><em>Opera10.5+</em>;</li>\n<li><em>IE_older</em> (For IE &lt;= 6).</li>\n<li><em>IE8</em>;</li>\n<li><em>IE9+</em>;</li>\n</ul>", "full": "<h1>Framework Detection Module</h1>\n\n<p>This module is mainly used to perform several <em>browser-detection tests</em>:</p>\n\n<ul>\n<li>browser</li>\n<li>isIE, isFirefox, isChrome</li>\n<li>querySelectorAll</li>\n<li>opacity, color</li>\n</ul>\n\n<h2>Compatibility for not support CSS</h2>\n\n<ul>\n<li>position:fixed - iOS Safari / Opera Mini</li>\n<li>CSS3 Opacity - I8 older using the \"filter\" property</li>\n<li>CSS3 Colors - I8 older using rgb rather than rgba</li>\n</ul>\n\n<p>Example #1 (Detect browser)</p>\n\n<p>Here's an example on how to <em>detect</em> the current browser:</p>\n\n<pre><code>if (tiramisu.detect('browser') === 'IE9')) {\n    console.log('IE');\n}\n</code></pre>\n\n<h2>A shortcut to perform this check is</h2>\n\n<pre><code>if (tiramisu.detect('isIE')) {\n    console.log('IE');\n}\n</code></pre>\n\n<p>The main difference between the first and the second example is that <em>isIE</em> and, in general, <em>is(X)</em><br />methods doesn't check the browser for a specific version.</p>\n\n<p>If you need to perform a check for a specific version you'll need to rely on <em>detect('browser')</em>;<br />the possible return values are:</p>\n\n<ul>\n<li><em>safarichrome</em>;</li>\n<li><em>firefox3</em>;</li>\n<li><em>firefox4</em>;</li>\n<li><em>Opera10.4</em>;</li>\n<li><em>Opera10.5+</em>;</li>\n<li><em>IE_older</em> (For IE &lt;= 6).</li>\n<li><em>IE8</em>;</li>\n<li><em>IE9+</em>;</li>\n</ul>", "summary": "<h1>Framework Detection Module</h1>"}, "tags": [{"type": "param", "name": "key", "types": ["String"], "description": "The test to perform (see the var tests below)"}, {"type": "returns", "string": "{Boolean} The test result"}, {"type": "api", "visibility": "public"}]}]