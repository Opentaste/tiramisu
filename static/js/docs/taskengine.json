[{"ignore": false, "code": "// *requestAnimFrame* (used for handling tasks), thx @paul_irish for this idea\ntiramisu.modules.requestAnimFrame = (function() {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||\n    function(callback) {\n        window.setTimeout(callback, 1000 / 60);\n    };\n})();\ntiramisu.modules.task = function(delay, cb) {\n\n    // Each module within Tiramisu can to need inherit other modules.\n    // The number of cups of coffee is identified for each module.\n    var ingredients = [],\n        cups_of_coffee = 6;\n\n    var interval, requestAnimFrame = t.requestAnimFrame;\n\n    if (arguments.length > 2) {\n        interval = arguments[1];\n        cb = arguments[2];\n    }\n\n    var start = +new Date(),\n        pass = interval;\n\n    function animate() {\n        var progress = +new Date() - start;\n\n        if (interval !== undefined) {\n            if (progress > pass) {\n                pass += interval;\n                cb();\n            }\n        }\n\n        // The recursion continues only in two cases:\n        // - The elapsed time is less than the total time;\n        // - The total time is infinite (so a loop) but there \n        //   is an interval of time between repetitions of the callback.\n        if (progress < delay || (delay == 'loop' && interval !== undefined)) {\n            requestAnimFrame(animate);\n        } else {\n            if (interval === undefined) {\n                cb();\n            }\n        }\n    }\n    animate();\n};", "description": {"body": "<p>This module is used to perform a function at a particular amount of time or perform the same<br />function several times in that time frame.</p>\n\n<pre><code>tiramisu.task(delay, [interval], callback);\n</code></pre>\n\n<p>where \u201cinterval\u201d is an optional argument</p>\n\n<p>Example #1 (The callback is executed after 2000 ms)</p>\n\n<pre><code>tiramisu.task(2000, callback)\n</code></pre>\n\n<p>Example #2 (The callback is executed every 100 ms in a period of 2000ms)</p>\n\n<pre><code>tiramisu.task(2000, 100, callback)\n</code></pre>\n\n<p>Example #3 (The callback is executed every 500 ms in loop.)</p>\n\n<pre><code>tiramisu.task('loop', 500, callback)\n</code></pre>\n\n<p>param {integer} delay The total task delay(ms)<br />param {integer} [interval] The interval of the repetitions(ms)<br />param {Function} cb The callback function</p>", "full": "<h1>Task Engine Module</h1>\n\n<p>This module is used to perform a function at a particular amount of time or perform the same<br />function several times in that time frame.</p>\n\n<pre><code>tiramisu.task(delay, [interval], callback);\n</code></pre>\n\n<p>where \u201cinterval\u201d is an optional argument</p>\n\n<p>Example #1 (The callback is executed after 2000 ms)</p>\n\n<pre><code>tiramisu.task(2000, callback)\n</code></pre>\n\n<p>Example #2 (The callback is executed every 100 ms in a period of 2000ms)</p>\n\n<pre><code>tiramisu.task(2000, 100, callback)\n</code></pre>\n\n<p>Example #3 (The callback is executed every 500 ms in loop.)</p>\n\n<pre><code>tiramisu.task('loop', 500, callback)\n</code></pre>\n\n<p>param {integer} delay The total task delay(ms)<br />param {integer} [interval] The interval of the repetitions(ms)<br />param {Function} cb The callback function</p>", "summary": "<h1>Task Engine Module</h1>"}, "tags": []}]